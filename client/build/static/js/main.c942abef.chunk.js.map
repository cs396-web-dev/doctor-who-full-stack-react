{"version":3,"sources":["Header.js","DoctorList.js","DoctorDetailView.js","DoctorEditView.js","DetailPanel.js","CompanionList.js","CompanionsPanel.js","App.js","index.js"],"names":["Header","props","resetData","bind","ev","fetch","then","response","json","this","onReset","preventDefault","className","title","id","onClick","React","Component","DoctorList","handleSelection","docID","target","dataset","key","doctor","doctors","filter","doc","_id","onDoctorSelection","map","item","href","data-key","name","addNewDoc","DoctorDetailView","deleteDoc","window","confirm","url","method","text","onDoctorDelete","onToggleMode","image_url","alt","src","seasons","join","DoctorEditView","ordering","state","errors","handleChange","handleSubmit","val","currentTarget","value","prop","length","seasonsError","seasonsUnvalidated","split","season","seasonNum","parseInt","trim","Number","isNaN","orderingError","setState","seasonsString","toString","num","data","parseSeasons","mode","headers","body","JSON","stringify","onDoctorCreateUpdate","buttonText","type","onChange","DetailPanel","CompanionList","companions","companion","data-id","CompanionsPanel","App","modes","view","edit","create","currentDoctor","currentCompanions","handleDoctorSelection","fetchDoctors","handleCreateUpdateDoctor","handleDeleteDoctor","showCreateDocForm","handleReset","toggleMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c942abef.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.resetData = this.resetData.bind(this);\n    }\n\n    resetData (ev) {\n        fetch(`/reset/`)\n            .then(response => response.json())\n            .then(this.props.onReset);\n\n        ev.preventDefault();\n    }\n\n    render () {\n        return (\n            <header className=\"header\">\n                <h1>{this.props.title}</h1>\n                <button id=\"reset\" className=\"btn\" onClick={this.resetData}>Reset Data</button>\n            </header>\n        );\n    }\n}\n\nexport default Header;","// useful reference: https://reactjs.org/docs/faq-ajax.html\nimport React from 'react';\n\nclass DoctorList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSelection = this.handleSelection.bind(this);\n    }\n  \n    handleSelection(ev) {\n        const docID = ev.target.dataset.key;\n        const doctor = this.props.doctors.filter(doc => doc._id === docID)[0];\n\n        // notify the rest of the app that the doctor changed\n        this.props.onDoctorSelection(doctor);\n    }\n\n    render () {\n        if (!this.props.doctors) {\n            return (\n                <aside className=\"aside\">\n                    {/* List of doctors goes here */}\n                </aside>\n            );\n        }\n\n        return (\n            <aside className=\"aside\">\n                <ol>\n                {\n                    this.props.doctors.map(item => (\n                        <li key={item._id} >\n                            <a href=\"#\" data-key={item._id} onClick={this.handleSelection}>{item.name}</a>\n                        </li>\n                    ))\n                }\n                </ol>\n                <button className=\"btn\" onClick={this.props.addNewDoc}>Add New</button>\n            </aside>\n        );\n    }\n}\n\nexport default DoctorList;","import React from 'react';\n\nclass DoctorDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.deleteDoc = this.deleteDoc.bind(this);\n\n    }\n\n    deleteDoc (ev) {\n        const answer = window.confirm('Are you sure?');\n        if (answer) {\n            const url = `/doctors/${this.props.doctor._id}`;\n            fetch(url, {\n                    method: 'DELETE'\n                })\n                .then(response => response.text())\n                .then(() => {\n                    this.props.onDoctorDelete();\n                });\n        }\n    }\n\n    render () {\n        const doctor = this.props.doctor;\n        if (!doctor.name) {\n            return (\n                <section className=\"doctor\"></section>   \n            )                                               \n        }\n            \n        return ( \n            <div className=\"doctor\">\n                <div className=\"top\">\n                    <h2>{doctor.name}</h2>\n                    <div>\n                        <button className=\"btn\" onClick={ev => { this.props.onToggleMode('edit', ev);} }>Edit</button> \n                        <button className=\"btn\" onClick={this.deleteDoc}>delete</button> \n                    </div>\n                </div>\n                {doctor.image_url && <img alt={doctor.name + ' image'} className=\"thumbMedium\" src={doctor.image_url} />}\n                <p>Seasons: {doctor.seasons ? doctor.seasons.join(', ') : ''}</p>\n            </div>\n        ) \n    }\n}\n\nexport default DoctorDetailView;","import React from 'react';\n\nclass DoctorEditView extends React.Component {\n    constructor(props) {\n        super(props);\n        const {_id, name, seasons, ordering, image_url} = props.doctor;\n        this.state = {\n            _id: _id, \n            name: name, \n            seasons: seasons ? seasons.join(', ') : '', \n            ordering: ordering, \n            image_url: image_url,\n            errors: {\n                name: '', \n                seasons: '', \n                ordering: '', \n                image_url: ''\n            }\n        }\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //*********************************************************/\n    // NOTE: HACK\n    // This feels like a hac to me.\n    // When you're using the state object to manage the form data,\n    // but then this component's props are updated by the\n    // parent container (i.e. the user wants to edit\n    // a different doctor), this is the only way that I could find\n    // to update the state.\n    //\n    // Is there's also a way to destroy and recreate the form?\n    // Seems cleaner\n    //*********************************************************/\n    static getDerivedStateFromProps(props, state) {\n        // this hook fires everytime props or state is modified:\n        if (!props.doctor || props.doctor._id === state._id) {\n            return null;\n        }\n        const {_id, name, seasons, ordering, image_url} = props.doctor;\n        return {\n            _id: _id, \n            name: name, \n            seasons: seasons ? seasons.join(', ') : '', \n            ordering: ordering, \n            image_url: image_url,\n            errors: {\n                name: '', \n                seasons: '', \n                ordering: '', \n                image_url: ''\n            }\n        };\n    }\n    \n    handleChange (ev) {\n        let val = ev.currentTarget.value;\n        const prop = ev.currentTarget.name;\n        const errors = this.state.errors;\n        if (prop ==='name') {\n            errors[prop] = val.length >= 1 ? '' : 'Name is required';\n        } else if (prop ==='seasons') { \n            let seasonsError = '';\n            const seasonsUnvalidated = val.split(',');\n            for (const season of seasonsUnvalidated) {\n                const seasonNum = parseInt(season.trim());\n                if (Number.isNaN(seasonNum) && season.trim().length > 0) {\n                    seasonsError = 'Please verify that your \"seasons\" entry is correct.';\n                    break;\n                }\n            }\n            errors[prop] = seasonsError; \n        } else if (prop ==='ordering') { \n            let orderingError = '';\n            const ordering = parseInt(val.trim());\n            if (Number.isNaN(ordering) && val.trim().length > 0) {\n                orderingError = 'Ordering must be an integer.';\n            }\n            errors[prop] = orderingError; \n            if (errors[prop].length === 0) {\n                val = parseInt(val);\n            }\n        }\n        this.setState({\n            [prop]: val,\n            errors: errors\n        });\n    }\n\n    parseSeasons (seasonsString) {\n        return seasonsString.toString().split(',')\n            .map(season => parseInt(season.trim()))\n            .filter(num => !Number.isNaN(num));\n    }\n\n    handleSubmit (ev) {\n        ev.preventDefault();\n\n        const errors = this.state.errors\n        if (errors.name.length > 0 || errors.seasons.length > 0 | errors.ordering.length > 0) {\n            return;\n        }\n        const data = {\n            name: this.state.name,\n            seasons: this.parseSeasons(this.state.seasons),\n            ordering: this.state.ordering,\n            image_url: this.state.image_url\n        };\n        let url = '/doctors/';\n        let method = 'POST'\n        if (this.props.mode === 'edit') {\n            url += this.state._id;\n            method = 'PATCH';\n        }\n\n        // OK to submit:\n        fetch(url, {\n                method: method,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            })\n            .then(response => response.json())\n            .then(data => {\n                this.props.onDoctorCreateUpdate(data);\n                this.props.onToggleMode('view');\n            });\n\n    }\n\n    render () {\n        const buttonText = this.state._id ? \"Update\" : \"Create\";\n        const errors = this.state.errors;\n        if (!this.state._id && this.props.mode !== 'create') {\n            return (\n                <section className=\"doctor\"></section>   \n            )                                               \n        }\n        return ( \n            <div className=\"doctor\">\n                <form id=\"edit-doctor-form\">\n                    <div className=\"error\"></div>\n                    <div className=\"input-section\">\n                        <label>Name</label>\n                        <input type=\"text\" \n                            name=\"name\" \n                            value={this.state.name}\n                            onChange={this.handleChange} />\n                        {errors.name.length > 0 && \n                            <span className='error'>{errors.name}</span>}\n                    </div>\n                    <div className=\"input-section\">\n                        <label>Seasons</label>\n                        <input type=\"text\" \n                            name=\"seasons\" \n                            value={this.state.seasons}\n                            onChange={this.handleChange} />\n                            {errors.seasons.length > 0 && \n                                <span className='error'>{errors.seasons}</span>}\n                    </div>\n                    <div className=\"input-section\">\n                        <label>Ordering</label>\n                        <input type=\"text\" \n                            name=\"ordering\" \n                            value={this.state.ordering}\n                            onChange={this.handleChange} />\n                            {errors.ordering.length > 0 && \n                                <span className='error'>{errors.ordering}</span>}\n                    </div>\n                    <div className=\"input-section\">\n                        <label>Image</label>\n                        <input type=\"text\" \n                            name=\"image_url\" \n                            value={this.state.image_url}\n                            onChange={this.handleChange} />\n                    </div>\n                    <button className=\"btn btn-main\" onClick={this.handleSubmit}>{buttonText}</button>\n                    <a className=\"btn\" onClick={ev => { this.props.onToggleMode('view', ev);}}>Cancel</a>\n                </form>\n            </div>\n        ) \n    }\n}\n\nexport default DoctorEditView;","import React from 'react';\nimport DoctorDetailView from './DoctorDetailView';\nimport DoctorEditView from './DoctorEditView';\n\nclass DetailPanel extends React.Component {\n\n    render () {\n        const doc = this.props.doctor || {};\n        if (this.props.mode === 'view') {\n            return (\n               <DoctorDetailView \n                    doctor={doc}\n                    mode={this.props.mode}\n                    onToggleMode={this.props.onToggleMode}\n                    onDoctorDelete={this.props.onDoctorDelete}  />\n            ) \n        } else {\n            return (\n                <DoctorEditView \n                    doctor={doc}\n                    mode={this.props.mode}\n                    onToggleMode={this.props.onToggleMode}\n                    onDoctorCreateUpdate={this.props.onDoctorCreateUpdate} />\n            )\n        }\n    }\n}\n\nexport default DetailPanel;","import React from 'react';\n\nclass CompanionList extends React.Component {\n  \n    render () {\n        if (!this.props.companions) {\n            return (\n                <section className=\"companions\"></section>\n            );\n        }\n        const companions = this.props.companions;\n        return (\n            <section className=\"companions\">\n                <h2>Companions</h2>\n                <table>\n                    <tbody>\n                    {\n                        companions.map(companion => (\n                            <tr key={companion._id} data-id={companion._id}>\n                                <td><img className=\"thumb\" alt={companion.name + ' image'} src={companion.image_url} /></td>\n                                <td>{companion.name}</td>\n                                {/* <td><a className=\"edit-companion\" data-id={companion._id} href=\"#\">Edit</a></td> \n                                <td><a className=\"delete-companion\" data-id={companion._id} href=\"#\">Delete</a></td> */}\n                            </tr>\n                        ))\n                    }\n                    </tbody>\n                </table>\n            </section>\n        );\n    }\n}\n\nexport default CompanionList;","import React from 'react';\nimport CompanionList from './CompanionList';\n\nclass CompanionsPanel extends React.Component {\n\n    render () {\n        return (\n            <CompanionList companions={this.props.companions}  />\n        )\n    }\n}\n\nexport default CompanionsPanel;","import Header from './Header';\nimport DoctorList from './DoctorList';\nimport DetailPanel from './DetailPanel';\nimport CompanionsPanel from './CompanionsPanel';\nimport React from 'react';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.modes = {\n            view: 'view',\n            edit: 'edit',\n            create: 'create'\n        }\n        this.state = {\n            currentDoctor: null,\n            currentCompanions: null,\n            mode: this.modes.view\n        }\n\n        // this.syncDoctorData();\n\n        this.handleDoctorSelection = this.handleDoctorSelection.bind(this);\n        this.fetchDoctors = this.fetchDoctors.bind(this); \n        this.handleCreateUpdateDoctor = this.handleCreateUpdateDoctor.bind(this);\n        this.handleDeleteDoctor = this.handleDeleteDoctor.bind(this);\n        this.showCreateDocForm = this.showCreateDocForm.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.toggleMode = this.toggleMode.bind(this);\n    }\n  \n    handleDoctorSelection(doc) {\n        this.setState({\n            currentDoctor: doc,\n            mode: this.modes.view\n        })\n        fetch(`/doctors/${doc._id}/companions`)\n            .then(response => response.json())\n            .then(companions => {\n                this.setState({\n                    currentCompanions: companions\n                });\n            })\n    }\n    \n    showCreateDocForm () {\n        this.setState({\n            currentDoctor: null,\n            currentCompanions: null,\n            mode: this.modes.create\n        })\n    }\n\n    componentDidMount() {\n        this.fetchDoctors()\n    }\n\n    fetchDoctors () {\n        fetch('/doctors')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    doctors: data\n                })\n            });\n    }\n\n    toggleMode(mode, ev) {\n        this.setState({\n            mode: this.modes[mode]\n        })\n        if (ev) {\n            ev.preventDefault();\n        }\n    }\n\n    handleReset () {\n        this.handleDeleteDoctor();\n    }\n\n    handleCreateUpdateDoctor (doc) {\n        this.setState({\n            currentDoctor: doc\n        });\n        this.fetchDoctors();\n    }\n\n    handleDeleteDoctor () {\n        this.setState({\n            currentDoctor: null,\n            currentCompanions: null\n        });\n        this.fetchDoctors();\n    }\n  \n    render () {\n        \n        return (\n            <div className=\"container\">\n                <Header title=\"Doctor Who Editor\"\n                    onReset={this.handleReset} />\n\n                <DoctorList \n                    onDoctorSelection={this.handleDoctorSelection} \n                    doctors={this.state.doctors}\n                    addNewDoc={this.showCreateDocForm} />\n\n                <main className=\"main\">\n                    <DetailPanel \n                        doctor={this.state.currentDoctor}\n                        mode={this.state.mode}\n                        onToggleMode={this.toggleMode}\n                        onDoctorCreateUpdate={this.handleCreateUpdateDoctor}\n                        onDoctorDelete={this.handleDeleteDoctor} />\n\n                    <CompanionsPanel \n                        companions={this.state.currentCompanions} />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}